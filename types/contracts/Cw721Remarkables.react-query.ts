/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { useMutation, UseMutationOptions } from "@tanstack/react-query";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForMetadata, Metadata, ExecuteMsg, Binary, MintMsgForMetadata, Empty, NftInfoResponse } from "./Cw721Remarkables.types";
import { Cw721RemarkablesClient } from "./Cw721Remarkables.client";
export interface Cw721RemarkablesExtensionMutation {
  client: Cw721RemarkablesClient;
  msg: {
    msg: Empty;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721RemarkablesExtensionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721RemarkablesExtensionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721RemarkablesExtensionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.extension(msg, fee, memo, funds), options);
}
export interface Cw721RemarkablesBurnMutation {
  client: Cw721RemarkablesClient;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721RemarkablesBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721RemarkablesBurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721RemarkablesBurnMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burn(msg, fee, memo, funds), options);
}
export interface Cw721RemarkablesMintMutation {
  client: Cw721RemarkablesClient;
  msg: {
    extension: Metadata;
    owner: string;
    tokenId: string;
    tokenUri?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721RemarkablesMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721RemarkablesMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721RemarkablesMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface Cw721RemarkablesRevokeAllMutation {
  client: Cw721RemarkablesClient;
  msg: {
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721RemarkablesRevokeAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721RemarkablesRevokeAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721RemarkablesRevokeAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revokeAll(msg, fee, memo, funds), options);
}
export interface Cw721RemarkablesApproveAllMutation {
  client: Cw721RemarkablesClient;
  msg: {
    expires?: Expiration;
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721RemarkablesApproveAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721RemarkablesApproveAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721RemarkablesApproveAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approveAll(msg, fee, memo, funds), options);
}
export interface Cw721RemarkablesRevokeMutation {
  client: Cw721RemarkablesClient;
  msg: {
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721RemarkablesRevokeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721RemarkablesRevokeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721RemarkablesRevokeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revoke(msg, fee, memo, funds), options);
}
export interface Cw721RemarkablesApproveMutation {
  client: Cw721RemarkablesClient;
  msg: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721RemarkablesApproveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721RemarkablesApproveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721RemarkablesApproveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approve(msg, fee, memo, funds), options);
}
export interface Cw721RemarkablesSendNftMutation {
  client: Cw721RemarkablesClient;
  msg: {
    contract: string;
    msg: Binary;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721RemarkablesSendNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721RemarkablesSendNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721RemarkablesSendNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendNft(msg, fee, memo, funds), options);
}
export interface Cw721RemarkablesTransferNftMutation {
  client: Cw721RemarkablesClient;
  msg: {
    recipient: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721RemarkablesTransferNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721RemarkablesTransferNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721RemarkablesTransferNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transferNft(msg, fee, memo, funds), options);
}