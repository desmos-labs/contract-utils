/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint64, Timestamp, InstantiateMsg, PoapInstantiateMsg, InstantiateMsg1, EventInfo, ExecuteMsg, QueryMsg, Addr, QueryConfigResponse } from "./PoapManager.types";
import { PoapManagerQueryClient, PoapManagerClient } from "./PoapManager.client";
export const poapManagerQueryKeys = {
  contract: ([{
    contract: "poapManager"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...poapManagerQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...poapManagerQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const)
};
export const poapManagerQueries = {
  config: <TData = QueryConfigResponse,>({
    client,
    options
  }: PoapManagerConfigQuery<TData>): UseQueryOptions<QueryConfigResponse, Error, TData> => ({
    queryKey: poapManagerQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface PoapManagerReactQuery<TResponse, TData = TResponse> {
  client: PoapManagerQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface PoapManagerConfigQuery<TData> extends PoapManagerReactQuery<QueryConfigResponse, TData> {}
export function usePoapManagerConfigQuery<TData = QueryConfigResponse>({
  client,
  options
}: PoapManagerConfigQuery<TData>) {
  return useQuery<QueryConfigResponse, Error, TData>(poapManagerQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PoapManagerUpdateAdminMutation {
  client: PoapManagerClient;
  msg: {
    newAdmin: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapManagerUpdateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapManagerUpdateAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapManagerUpdateAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateAdmin(msg, fee, memo, funds), options);
}
export interface PoapManagerMintToMutation {
  client: PoapManagerClient;
  msg: {
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapManagerMintToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapManagerMintToMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapManagerMintToMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintTo(msg, fee, memo, funds), options);
}
export interface PoapManagerClaimMutation {
  client: PoapManagerClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapManagerClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapManagerClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapManagerClaimMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(fee, memo, funds), options);
}