/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint64, Timestamp, InstantiateMsg, InstantiateMsg1, EventInfo, ExecuteMsg, QueryMsg, Expiration, Addr, AllNftInfoResponseForMetadata, OwnerOfResponse, Approval, NftInfoResponseForMetadata, Metadata, QueryConfigResponse, QueryEventInfoResponse, QueryMintedAmountResponse, TokensResponse } from "./Poap.types";
import { PoapQueryClient, PoapClient } from "./Poap.client";
export const poapQueryKeys = {
  contract: ([{
    contract: "poap"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...poapQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...poapQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  eventInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...poapQueryKeys.address(contractAddress)[0],
    method: "event_info",
    args
  }] as const),
  mintedAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...poapQueryKeys.address(contractAddress)[0],
    method: "minted_amount",
    args
  }] as const),
  allNftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...poapQueryKeys.address(contractAddress)[0],
    method: "all_nft_info",
    args
  }] as const),
  tokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...poapQueryKeys.address(contractAddress)[0],
    method: "tokens",
    args
  }] as const)
};
export const poapQueries = {
  config: <TData = QueryConfigResponse,>({
    client,
    options
  }: PoapConfigQuery<TData>): UseQueryOptions<QueryConfigResponse, Error, TData> => ({
    queryKey: poapQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  eventInfo: <TData = QueryEventInfoResponse,>({
    client,
    options
  }: PoapEventInfoQuery<TData>): UseQueryOptions<QueryEventInfoResponse, Error, TData> => ({
    queryKey: poapQueryKeys.eventInfo(client?.contractAddress),
    queryFn: () => client ? client.eventInfo() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  mintedAmount: <TData = QueryMintedAmountResponse,>({
    client,
    args,
    options
  }: PoapMintedAmountQuery<TData>): UseQueryOptions<QueryMintedAmountResponse, Error, TData> => ({
    queryKey: poapQueryKeys.mintedAmount(client?.contractAddress, args),
    queryFn: () => client ? client.mintedAmount({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allNftInfo: <TData = AllNftInfoResponseForMetadata,>({
    client,
    args,
    options
  }: PoapAllNftInfoQuery<TData>): UseQueryOptions<AllNftInfoResponseForMetadata, Error, TData> => ({
    queryKey: poapQueryKeys.allNftInfo(client?.contractAddress, args),
    queryFn: () => client ? client.allNftInfo({
      includeExpired: args.includeExpired,
      tokenId: args.tokenId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  tokens: <TData = TokensResponse,>({
    client,
    args,
    options
  }: PoapTokensQuery<TData>): UseQueryOptions<TokensResponse, Error, TData> => ({
    queryKey: poapQueryKeys.tokens(client?.contractAddress, args),
    queryFn: () => client ? client.tokens({
      limit: args.limit,
      owner: args.owner,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface PoapReactQuery<TResponse, TData = TResponse> {
  client: PoapQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface PoapTokensQuery<TData> extends PoapReactQuery<TokensResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function usePoapTokensQuery<TData = TokensResponse>({
  client,
  args,
  options
}: PoapTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(poapQueryKeys.tokens(client?.contractAddress, args), () => client ? client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PoapAllNftInfoQuery<TData> extends PoapReactQuery<AllNftInfoResponseForMetadata, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function usePoapAllNftInfoQuery<TData = AllNftInfoResponseForMetadata>({
  client,
  args,
  options
}: PoapAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponseForMetadata, Error, TData>(poapQueryKeys.allNftInfo(client?.contractAddress, args), () => client ? client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PoapMintedAmountQuery<TData> extends PoapReactQuery<QueryMintedAmountResponse, TData> {
  args: {
    user: string;
  };
}
export function usePoapMintedAmountQuery<TData = QueryMintedAmountResponse>({
  client,
  args,
  options
}: PoapMintedAmountQuery<TData>) {
  return useQuery<QueryMintedAmountResponse, Error, TData>(poapQueryKeys.mintedAmount(client?.contractAddress, args), () => client ? client.mintedAmount({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PoapEventInfoQuery<TData> extends PoapReactQuery<QueryEventInfoResponse, TData> {}
export function usePoapEventInfoQuery<TData = QueryEventInfoResponse>({
  client,
  options
}: PoapEventInfoQuery<TData>) {
  return useQuery<QueryEventInfoResponse, Error, TData>(poapQueryKeys.eventInfo(client?.contractAddress), () => client ? client.eventInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PoapConfigQuery<TData> extends PoapReactQuery<QueryConfigResponse, TData> {}
export function usePoapConfigQuery<TData = QueryConfigResponse>({
  client,
  options
}: PoapConfigQuery<TData>) {
  return useQuery<QueryConfigResponse, Error, TData>(poapQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PoapUpdateMinterMutation {
  client: PoapClient;
  msg: {
    newMinter: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapUpdateMinterMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapUpdateMinterMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapUpdateMinterMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateMinter(msg, fee, memo, funds), options);
}
export interface PoapUpdateAdminMutation {
  client: PoapClient;
  msg: {
    newAdmin: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapUpdateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapUpdateAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapUpdateAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateAdmin(msg, fee, memo, funds), options);
}
export interface PoapUpdateEventInfoMutation {
  client: PoapClient;
  msg: {
    endTime: Timestamp;
    startTime: Timestamp;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapUpdateEventInfoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapUpdateEventInfoMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapUpdateEventInfoMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateEventInfo(msg, fee, memo, funds), options);
}
export interface PoapMintToMutation {
  client: PoapClient;
  msg: {
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapMintToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapMintToMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapMintToMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintTo(msg, fee, memo, funds), options);
}
export interface PoapMintMutation {
  client: PoapClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapMintMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(fee, memo, funds), options);
}
export interface PoapDisableMintMutation {
  client: PoapClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapDisableMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapDisableMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapDisableMintMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.disableMint(fee, memo, funds), options);
}
export interface PoapEnableMintMutation {
  client: PoapClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePoapEnableMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PoapEnableMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PoapEnableMintMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.enableMint(fee, memo, funds), options);
}