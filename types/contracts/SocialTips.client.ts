/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint64, QueryMsg, Addr, QueryConfigResponse, Uint128, QueryUnclaimedSentTipsResponse, PendingTip, Coin, QueryPendingTipsResponse } from "./SocialTips.types";
export interface SocialTipsReadOnlyInterface {
  contractAddress: string;
  userPendingTips: ({
    user
  }: {
    user: string;
  }) => Promise<QueryPendingTipsResponse>;
  unclaimedSentTips: ({
    user
  }: {
    user: string;
  }) => Promise<QueryUnclaimedSentTipsResponse>;
  config: () => Promise<QueryConfigResponse>;
}
export class SocialTipsQueryClient implements SocialTipsReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.userPendingTips = this.userPendingTips.bind(this);
    this.unclaimedSentTips = this.unclaimedSentTips.bind(this);
    this.config = this.config.bind(this);
  }

  userPendingTips = async ({
    user
  }: {
    user: string;
  }): Promise<QueryPendingTipsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_pending_tips: {
        user
      }
    });
  };
  unclaimedSentTips = async ({
    user
  }: {
    user: string;
  }): Promise<QueryUnclaimedSentTipsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      unclaimed_sent_tips: {
        user
      }
    });
  };
  config = async (): Promise<QueryConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface SocialTipsInterface extends SocialTipsReadOnlyInterface {
  contractAddress: string;
  sender: string;
  sendTip: ({
    application,
    handle,
    ownerIndex
  }: {
    application: string;
    handle: string;
    ownerIndex?: Uint64;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claimTips: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateAdmin: ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateMaxPendingTips: ({
    value
  }: {
    value: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateMaxSentPendingTips: ({
    value
  }: {
    value: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  removePendingTip: ({
    application,
    handle
  }: {
    application: string;
    handle: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SocialTipsClient extends SocialTipsQueryClient implements SocialTipsInterface {
  override client: SigningCosmWasmClient;
  sender: string;
  override contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.sendTip = this.sendTip.bind(this);
    this.claimTips = this.claimTips.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
    this.updateMaxPendingTips = this.updateMaxPendingTips.bind(this);
    this.updateMaxSentPendingTips = this.updateMaxSentPendingTips.bind(this);
    this.removePendingTip = this.removePendingTip.bind(this);
  }

  sendTip = async ({
    application,
    handle,
    ownerIndex
  }: {
    application: string;
    handle: string;
    ownerIndex?: Uint64;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send_tip: {
        application,
        handle,
        owner_index: ownerIndex
      }
    }, fee, memo, funds);
  };
  claimTips = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_tips: {}
    }, fee, memo, funds);
  };
  updateAdmin = async ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admin: {
        new_admin: newAdmin
      }
    }, fee, memo, funds);
  };
  updateMaxPendingTips = async ({
    value
  }: {
    value: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_max_pending_tips: {
        value
      }
    }, fee, memo, funds);
  };
  updateMaxSentPendingTips = async ({
    value
  }: {
    value: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_max_sent_pending_tips: {
        value
      }
    }, fee, memo, funds);
  };
  removePendingTip = async ({
    application,
    handle
  }: {
    application: string;
    handle: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_pending_tip: {
        application,
        handle
      }
    }, fee, memo, funds);
  };
}