/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { useMutation, UseMutationOptions } from "@tanstack/react-query";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForNullable_Empty, Empty, ApprovalResponse, ApprovalsResponse, ContractInfoResponse, ExecuteMsg, Binary, MintMsgForNullable_Empty, InstantiateMsg, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsgForEmpty, TokensResponse } from "./Cw721Base.types";
import { Cw721BaseClient } from "./Cw721Base.client";
export interface Cw721BaseExtensionMutation {
  client: Cw721BaseClient;
  msg: {
    msg: Empty;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721BaseExtensionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721BaseExtensionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721BaseExtensionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.extension(msg, fee, memo, funds), options);
}
export interface Cw721BaseBurnMutation {
  client: Cw721BaseClient;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721BaseBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721BaseBurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721BaseBurnMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burn(msg, fee, memo, funds), options);
}
export interface Cw721BaseMintMutation {
  client: Cw721BaseClient;
  msg: MintMsgForNullable_Empty;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721BaseMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721BaseMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721BaseMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface Cw721BaseRevokeAllMutation {
  client: Cw721BaseClient;
  msg: {
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721BaseRevokeAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721BaseRevokeAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721BaseRevokeAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revokeAll(msg, fee, memo, funds), options);
}
export interface Cw721BaseApproveAllMutation {
  client: Cw721BaseClient;
  msg: {
    expires?: Expiration;
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721BaseApproveAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721BaseApproveAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721BaseApproveAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approveAll(msg, fee, memo, funds), options);
}
export interface Cw721BaseRevokeMutation {
  client: Cw721BaseClient;
  msg: {
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721BaseRevokeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721BaseRevokeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721BaseRevokeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revoke(msg, fee, memo, funds), options);
}
export interface Cw721BaseApproveMutation {
  client: Cw721BaseClient;
  msg: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721BaseApproveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721BaseApproveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721BaseApproveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approve(msg, fee, memo, funds), options);
}
export interface Cw721BaseSendNftMutation {
  client: Cw721BaseClient;
  msg: {
    contract: string;
    msg: Binary;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721BaseSendNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721BaseSendNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721BaseSendNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendNft(msg, fee, memo, funds), options);
}
export interface Cw721BaseTransferNftMutation {
  client: Cw721BaseClient;
  msg: {
    recipient: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw721BaseTransferNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw721BaseTransferNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw721BaseTransferNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transferNft(msg, fee, memo, funds), options);
}