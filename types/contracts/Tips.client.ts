/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { ServiceFee, Uint128, Decimal, Uint64, InstantiateMsg, Coin, ExecuteMsg, Target, QueryMsg, Addr, QueryConfigResponse, TipsResponse, Tip } from "./Tips.types";
export interface TipsReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<QueryConfigResponse>;
  userReceivedTips: ({
    user
  }: {
    user: string;
  }) => Promise<TipsResponse>;
  userSentTips: ({
    user
  }: {
    user: string;
  }) => Promise<TipsResponse>;
  postReceivedTips: ({
    postId
  }: {
    postId: Uint64;
  }) => Promise<TipsResponse>;
}
export class TipsQueryClient implements TipsReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.userReceivedTips = this.userReceivedTips.bind(this);
    this.userSentTips = this.userSentTips.bind(this);
    this.postReceivedTips = this.postReceivedTips.bind(this);
  }

  config = async (): Promise<QueryConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  userReceivedTips = async ({
    user
  }: {
    user: string;
  }): Promise<TipsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_received_tips: {
        user
      }
    });
  };
  userSentTips = async ({
    user
  }: {
    user: string;
  }): Promise<TipsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_sent_tips: {
        user
      }
    });
  };
  postReceivedTips = async ({
    postId
  }: {
    postId: Uint64;
  }): Promise<TipsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      post_received_tips: {
        post_id: postId
      }
    });
  };
}
export interface TipsInterface extends TipsReadOnlyInterface {
  contractAddress: string;
  sender: string;
  sendTip: ({
    amount,
    target
  }: {
    amount: Coin[];
    target: Target;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateServiceFee: ({
    newFee
  }: {
    newFee?: ServiceFee;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateAdmin: ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateSavedTipsHistorySize: ({
    newSize
  }: {
    newSize: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claimFees: ({
    receiver
  }: {
    receiver: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TipsClient extends TipsQueryClient implements TipsInterface {
  override client: SigningCosmWasmClient;
  sender: string;
  override contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.sendTip = this.sendTip.bind(this);
    this.updateServiceFee = this.updateServiceFee.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
    this.updateSavedTipsHistorySize = this.updateSavedTipsHistorySize.bind(this);
    this.claimFees = this.claimFees.bind(this);
  }

  sendTip = async ({
    amount,
    target
  }: {
    amount: Coin[];
    target: Target;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send_tip: {
        amount,
        target
      }
    }, fee, memo, funds);
  };
  updateServiceFee = async ({
    newFee
  }: {
    newFee?: ServiceFee;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_service_fee: {
        new_fee: newFee
      }
    }, fee, memo, funds);
  };
  updateAdmin = async ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admin: {
        new_admin: newAdmin
      }
    }, fee, memo, funds);
  };
  updateSavedTipsHistorySize = async ({
    newSize
  }: {
    newSize: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_saved_tips_history_size: {
        new_size: newSize
      }
    }, fee, memo, funds);
  };
  claimFees = async ({
    receiver
  }: {
    receiver: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_fees: {
        receiver
      }
    }, fee, memo, funds);
  };
}